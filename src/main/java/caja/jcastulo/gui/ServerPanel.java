/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package caja.jcastulo.gui;

import caja.gui.utils.WaitDialog;
import caja.jcastulo.shout.ServerListener;
import caja.jcastulo.shout.ServerObservable;
import caja.jcastulo.shout.ServerObservable.ServerStatus;
import caja.jcastulo.shout.ShoutServer;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

/**
 *
 * @author Carlos Juarez
 */
public class ServerPanel extends javax.swing.JPanel implements ServerListener {
    
    private static final String STOPPED_STATUS = "Stopped";
    
    private static final String RUNNING_STATUS = "Running";
    
    private static final String START_SERVER = "Start";
    
    private static final String STOP_SERVER = "Stop";

    private ShoutServer shoutServer;

    public ServerPanel() {
        initComponents();
    }

    public void setShoutServer(ShoutServer shoutServer) {
        this.shoutServer = shoutServer;
        this.shoutServer.addServerListener(this);
        portTextField.setText(Integer.toString(shoutServer.getPort()));
    }
    
    public void cleanup() {
        if (shoutServer.isRunning()) {
            shoutServer.shutdown();
            jLabelStatus.setText(STOPPED_STATUS);
            jButtonCtrl.setText(START_SERVER);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        portTextField = new javax.swing.JFormattedTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabelStatus = new javax.swing.JLabel();
        jButtonCtrl = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createTitledBorder("Server"));

        jLabel2.setText("Port");

        portTextField.setColumns(4);
        try {
            portTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jLabel1.setText("Status");

        jLabelStatus.setForeground(new java.awt.Color(0, 153, 255));
        jLabelStatus.setText(STOPPED_STATUS);

        jButtonCtrl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/caja/jcastulo/gui/play.png"))); // NOI18N
        jButtonCtrl.setText(START_SERVER);
        jButtonCtrl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCtrlActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(portTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonCtrl, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabelStatus)
                    .addComponent(jButtonCtrl)
                    .addComponent(jLabel2)
                    .addComponent(portTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCtrlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCtrlActionPerformed
        if (!shoutServer.isRunning()) {
                shoutServer.setPort(Integer.parseInt(portTextField.getText()));
                SwingWorker worker = new SwingWorker<Void, Void>() {
                    @Override
                    protected Void doInBackground() throws Exception {
                        shoutServer.start();
                        return null;
                    }

                    @Override
                    protected void done() {
                        WaitDialog.hideMsg();
                    }
                };
                worker.execute();
                WaitDialog.showMsg();
            
        } else {
            int responose = JOptionPane.showConfirmDialog(null, "Do you really want to shutdown the server",
                    "Confirm stopping server", JOptionPane.OK_CANCEL_OPTION);
            if (responose == 0) {
                SwingWorker worker = new SwingWorker<Void, Void>() {
                    @Override
                    protected Void doInBackground() throws Exception {
                        shoutServer.shutdown();
                        return null;
                    }

                    @Override
                    protected void done() {
                        WaitDialog.hideMsg();
                    }
                };
                worker.execute();
                WaitDialog.showMsg();
            }
        }
    }//GEN-LAST:event_jButtonCtrlActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCtrl;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelStatus;
    private javax.swing.JFormattedTextField portTextField;
    // End of variables declaration//GEN-END:variables

    @Override
    public void notifyNewServerStatus(final ServerStatus serverStatus) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                if(serverStatus==ServerObservable.ServerStatus.RUNNING){
                    portTextField.setEnabled(false);
                    jLabelStatus.setText(RUNNING_STATUS);
                    jButtonCtrl.setText(STOP_SERVER);
                }else{
                    jLabelStatus.setText(STOPPED_STATUS);
                    jButtonCtrl.setText(START_SERVER);
                    portTextField.setEnabled(true);
                }
            }
        });
    }
}
